
Day 11

   [ 인터페이스 ]

   - 클래스, final 클래스, abstract 클래스
   - 인터페이스는 모든 메서드가 abstract 메서드인 클래스를 의미한다.
   - 자바는 단일 상속을 지원하는 OOP 언어이다.
      모든 메서드가 abstract인 클래스를 상속한 경우 다른 클래스는 상속 불가
      ----> 인터페이스는 추가 상속이 가능은 특별한 형태의 클래스이다.
   - 인터페이스는 abstract 클래스와 비슷한 자바 프로그램의 구조로서
      객체 생성은 불가하고 상속으로만 사용이 가능하다.
   - 인터페이스 생성 방법

	interface 인터페이스이름 {
		상수
		abstract 메서드
             }

   - 인터페이스 사용 방법 : 상속

	interface 인터페이스이름 extends 부모인터페이스이름 {
		:
	}

	class 클래스명 extends 부모클래스명 implements 부모인터페이스이름 {


	}
	









    JDK 1.0  JDK 1.1
      8개        23개

    java.nnn    - 기본
	java.lang, java.util, java.io, java.net, java.sql.....	   
    javax.nnn  - 확장
             javax.sql, javax.nio....

    -------> 자바언어에서만 지원하는 API
    org.nnn     -
    -------> 자바에서만 지원하지 않고 다른 프로그래밍 언어에서도 지원되는 API로
                 어떤 표준화 위원회나 조직에서 정한 API를 자바에도 지원하기 
                 위해 만든 API
    
  [ 오류 처리 ]
   - 컴파일 오류 : 구문오류, API 사용 오류
   - 실행 오류 : 에러 - JVM 영역에서 발생하는 오류로서 치명적이라
                             JVM이 프로그램 실행을 중단시키고 callstack 정보를 화면에 출력한다.
	                미리 예측하고 대비하는 코드를 작성 불가
	       예외 - 자바 프로그램 영역에서 발생하는 실행 오류로 다소 가벼운 잘못된 상황
                             런타임 예외 - 발생 원인이 프로그램 코드 - 버그 - 예외 처리 선택
		   일반 예외 - 발생 원인이 외부적인 요인이다. - 예외 처리 필수 
   - 예외 처리 방법
     1. 적극적인 예외 처리

	try {
	      예외가 발생할 수도 있는 코드

   	} catch (처리해야하는 예외 클래스의 변수선언) {
                   처리 코드
	} finally {
	      예외 발생 여부와 관계없이 마지막에 수행을 보장하는 코드
             }

     2. 소극적인 예외 처리
	
	메서드 헤더에 'throws 처리해야하는 예외 클래스' 절을 추가

   - 예외 발생

           throw 발생시키고자하는예외클래스의객체

	throw new IOException(["예외메시지"])

           예외를 발생시키는 코드를 가지고 있는 메서드는 헤더 throws 절을 사용해서
           이 메서드는 호출시 예외가 발생할 수도 있다는 것을 알려야 한다.





































   























   









		




